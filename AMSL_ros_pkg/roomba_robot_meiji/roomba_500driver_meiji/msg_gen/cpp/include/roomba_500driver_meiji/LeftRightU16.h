/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/roomba_robot_meiji/roomba_500driver_meiji/msg/LeftRightU16.msg */
#ifndef ROOMBA_500DRIVER_MEIJI_MESSAGE_LEFTRIGHTU16_H
#define ROOMBA_500DRIVER_MEIJI_MESSAGE_LEFTRIGHTU16_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roomba_500driver_meiji
{
template <class ContainerAllocator>
struct LeftRightU16_ {
  typedef LeftRightU16_<ContainerAllocator> Type;

  LeftRightU16_()
  : right(0)
  , left(0)
  {
  }

  LeftRightU16_(const ContainerAllocator& _alloc)
  : right(0)
  , left(0)
  {
  }

  typedef uint16_t _right_type;
  uint16_t right;

  typedef uint16_t _left_type;
  uint16_t left;


  typedef boost::shared_ptr< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator>  const> ConstPtr;
}; // struct LeftRightU16
typedef  ::roomba_500driver_meiji::LeftRightU16_<std::allocator<void> > LeftRightU16;

typedef boost::shared_ptr< ::roomba_500driver_meiji::LeftRightU16> LeftRightU16Ptr;
typedef boost::shared_ptr< ::roomba_500driver_meiji::LeftRightU16 const> LeftRightU16ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500driver_meiji

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ad744b3bdcead2be361772af03fa5156";
  }

  static const char* value(const  ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xad744b3bdcead2beULL;
  static const uint64_t static_value2 = 0x361772af03fa5156ULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500driver_meiji/LeftRightU16";
  }

  static const char* value(const  ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 right\n\
uint16 left\n\
\n\
";
  }

  static const char* value(const  ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.right);
    stream.next(m.left);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LeftRightU16_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500driver_meiji::LeftRightU16_<ContainerAllocator> & v) 
  {
    s << indent << "right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right);
    s << indent << "left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500DRIVER_MEIJI_MESSAGE_LEFTRIGHTU16_H

