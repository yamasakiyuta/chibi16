# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roomba_500driver_meiji/RoombaCtrl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RoombaCtrl(genpy.Message):
  _md5sum = "cef9b586878cf4721995492e63a047cb"
  _type = "roomba_500driver_meiji/RoombaCtrl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """byte DRIVE=0
byte SAFE=1
byte FULL=2
byte POWER=3
byte SPOT=4
byte CLEAN=5
byte MAX=6
byte MOTORS=7
byte FORCE_SEEK_DOCK=8
byte WAKEUP=9
byte MOTORS_OFF=10
byte DRIVE_DIRECT=11
byte DOCK=12
byte DRIVE_PWM=13
byte DRIVE_FB=14
byte SONG=15


int32 DEFAULT_VELOCITY=200
int32 STRAIGHT_RADIUS=32768
byte TURN_CLOCK=-1
byte TURN_CNT_CLOCK=1
int32 mode
int32 velocity
int32 radius
geometry_msgs/Twist cntl
int16 r_pwm
int16 l_pwm

uint8[] song_melody

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  DRIVE = 0
  SAFE = 1
  FULL = 2
  POWER = 3
  SPOT = 4
  CLEAN = 5
  MAX = 6
  MOTORS = 7
  FORCE_SEEK_DOCK = 8
  WAKEUP = 9
  MOTORS_OFF = 10
  DRIVE_DIRECT = 11
  DOCK = 12
  DRIVE_PWM = 13
  DRIVE_FB = 14
  SONG = 15
  DEFAULT_VELOCITY = 200
  STRAIGHT_RADIUS = 32768
  TURN_CLOCK = -1
  TURN_CNT_CLOCK = 1

  __slots__ = ['mode','velocity','radius','cntl','r_pwm','l_pwm','song_melody']
  _slot_types = ['int32','int32','int32','geometry_msgs/Twist','int16','int16','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,velocity,radius,cntl,r_pwm,l_pwm,song_melody

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoombaCtrl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.velocity is None:
        self.velocity = 0
      if self.radius is None:
        self.radius = 0
      if self.cntl is None:
        self.cntl = geometry_msgs.msg.Twist()
      if self.r_pwm is None:
        self.r_pwm = 0
      if self.l_pwm is None:
        self.l_pwm = 0
      if self.song_melody is None:
        self.song_melody = ''
    else:
      self.mode = 0
      self.velocity = 0
      self.radius = 0
      self.cntl = geometry_msgs.msg.Twist()
      self.r_pwm = 0
      self.l_pwm = 0
      self.song_melody = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i6d2h.pack(_x.mode, _x.velocity, _x.radius, _x.cntl.linear.x, _x.cntl.linear.y, _x.cntl.linear.z, _x.cntl.angular.x, _x.cntl.angular.y, _x.cntl.angular.z, _x.r_pwm, _x.l_pwm))
      _x = self.song_melody
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cntl is None:
        self.cntl = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.mode, _x.velocity, _x.radius, _x.cntl.linear.x, _x.cntl.linear.y, _x.cntl.linear.z, _x.cntl.angular.x, _x.cntl.angular.y, _x.cntl.angular.z, _x.r_pwm, _x.l_pwm,) = _struct_3i6d2h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.song_melody = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i6d2h.pack(_x.mode, _x.velocity, _x.radius, _x.cntl.linear.x, _x.cntl.linear.y, _x.cntl.linear.z, _x.cntl.angular.x, _x.cntl.angular.y, _x.cntl.angular.z, _x.r_pwm, _x.l_pwm))
      _x = self.song_melody
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cntl is None:
        self.cntl = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.mode, _x.velocity, _x.radius, _x.cntl.linear.x, _x.cntl.linear.y, _x.cntl.linear.z, _x.cntl.angular.x, _x.cntl.angular.y, _x.cntl.angular.z, _x.r_pwm, _x.l_pwm,) = _struct_3i6d2h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.song_melody = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i6d2h = struct.Struct("<3i6d2h")
