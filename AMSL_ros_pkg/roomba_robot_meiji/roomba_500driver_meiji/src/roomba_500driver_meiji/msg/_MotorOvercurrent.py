# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roomba_500driver_meiji/MotorOvercurrent.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorOvercurrent(genpy.Message):
  _md5sum = "6f9cad922d9c9777c65cca16d91d80bf"
  _type = "roomba_500driver_meiji/MotorOvercurrent"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool side_brush
bool vacuum
bool main_brush
bool drive_right
bool drive_left

"""
  __slots__ = ['side_brush','vacuum','main_brush','drive_right','drive_left']
  _slot_types = ['bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       side_brush,vacuum,main_brush,drive_right,drive_left

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorOvercurrent, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.side_brush is None:
        self.side_brush = False
      if self.vacuum is None:
        self.vacuum = False
      if self.main_brush is None:
        self.main_brush = False
      if self.drive_right is None:
        self.drive_right = False
      if self.drive_left is None:
        self.drive_left = False
    else:
      self.side_brush = False
      self.vacuum = False
      self.main_brush = False
      self.drive_right = False
      self.drive_left = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.side_brush, _x.vacuum, _x.main_brush, _x.drive_right, _x.drive_left))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.side_brush, _x.vacuum, _x.main_brush, _x.drive_right, _x.drive_left,) = _struct_5B.unpack(str[start:end])
      self.side_brush = bool(self.side_brush)
      self.vacuum = bool(self.vacuum)
      self.main_brush = bool(self.main_brush)
      self.drive_right = bool(self.drive_right)
      self.drive_left = bool(self.drive_left)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.side_brush, _x.vacuum, _x.main_brush, _x.drive_right, _x.drive_left))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.side_brush, _x.vacuum, _x.main_brush, _x.drive_right, _x.drive_left,) = _struct_5B.unpack(str[start:end])
      self.side_brush = bool(self.side_brush)
      self.vacuum = bool(self.vacuum)
      self.main_brush = bool(self.main_brush)
      self.drive_right = bool(self.drive_right)
      self.drive_left = bool(self.drive_left)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B = struct.Struct("<5B")
