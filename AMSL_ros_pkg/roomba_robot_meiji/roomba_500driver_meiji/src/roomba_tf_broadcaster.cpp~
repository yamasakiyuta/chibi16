#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <turtlesim/Pose.h>

//std::string laser;


/*
void poseCallback(const turtlesim::PoseConstPtr& msg){
  static tf::TransformBroadcaster br;
  tf::Transform transform;
  transform.setOrigin( tf::Vector3(0.0, 0.0, 0.0) );
  tf::Quaternion q;
  q.setRPY(0, 0, 0);
  transform.setRotation(q);
  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "odom", laser));
}
*/
int laser(int argc, char** argv){
//  ros::init(argc, argv, "my_tf_broadcaster");
//  if (argc != 2){ROS_ERROR("need turtle name as argument"); return -1;};
//  turtle_name = argv[1];

//  ros::NodeHandle node;
  //ros::Subscriber sub = node.subscribe(turtle_name+"/pose", 10, &poseCallback);

  static tf::TransformBroadcaster br;
  tf::Transform transform;                                                             
  transform.setOrigin( tf::Vector3(0.0, 0.0, 0.0) );                                  
  tf::Quaternion q;                                                                  };
  q.setRPY(0, 0, 0);
  transform.setRotation(q);
  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "odom", "laser")); 
 ros::NodeHandle node;
  //ros::Subscriber sub = node.subscribe(turtle_name+"/pose", 10, &poseCallback);

  ros::spin();
  return 0;
};
