/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/roomba_robot_meiji/roomba_500driver_meiji/msg/Cliff.msg */
#ifndef ROOMBA_500DRIVER_MEIJI_MESSAGE_CLIFF_H
#define ROOMBA_500DRIVER_MEIJI_MESSAGE_CLIFF_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roomba_500driver_meiji
{
template <class ContainerAllocator>
struct Cliff_ {
  typedef Cliff_<ContainerAllocator> Type;

  Cliff_()
  : left(false)
  , front_left(false)
  , front_right(false)
  , right(false)
  , left_signal(0)
  , front_left_signal(0)
  , front_right_signal(0)
  , right_signal(0)
  {
  }

  Cliff_(const ContainerAllocator& _alloc)
  : left(false)
  , front_left(false)
  , front_right(false)
  , right(false)
  , left_signal(0)
  , front_left_signal(0)
  , front_right_signal(0)
  , right_signal(0)
  {
  }

  typedef uint8_t _left_type;
  uint8_t left;

  typedef uint8_t _front_left_type;
  uint8_t front_left;

  typedef uint8_t _front_right_type;
  uint8_t front_right;

  typedef uint8_t _right_type;
  uint8_t right;

  typedef int16_t _left_signal_type;
  int16_t left_signal;

  typedef int16_t _front_left_signal_type;
  int16_t front_left_signal;

  typedef int16_t _front_right_signal_type;
  int16_t front_right_signal;

  typedef int16_t _right_signal_type;
  int16_t right_signal;


  typedef boost::shared_ptr< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500driver_meiji::Cliff_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Cliff
typedef  ::roomba_500driver_meiji::Cliff_<std::allocator<void> > Cliff;

typedef boost::shared_ptr< ::roomba_500driver_meiji::Cliff> CliffPtr;
typedef boost::shared_ptr< ::roomba_500driver_meiji::Cliff const> CliffConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500driver_meiji::Cliff_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500driver_meiji

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500driver_meiji::Cliff_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a12f57db614fd7087ee2d0e03a9c0a26";
  }

  static const char* value(const  ::roomba_500driver_meiji::Cliff_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa12f57db614fd708ULL;
  static const uint64_t static_value2 = 0x7ee2d0e03a9c0a26ULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500driver_meiji/Cliff";
  }

  static const char* value(const  ::roomba_500driver_meiji::Cliff_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool left\n\
bool front_left\n\
bool front_right\n\
bool right\n\
\n\
int16 left_signal\n\
int16 front_left_signal\n\
int16 front_right_signal\n\
int16 right_signal\n\
\n\
";
  }

  static const char* value(const  ::roomba_500driver_meiji::Cliff_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left);
    stream.next(m.front_left);
    stream.next(m.front_right);
    stream.next(m.right);
    stream.next(m.left_signal);
    stream.next(m.front_left_signal);
    stream.next(m.front_right_signal);
    stream.next(m.right_signal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Cliff_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500driver_meiji::Cliff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500driver_meiji::Cliff_<ContainerAllocator> & v) 
  {
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_left);
    s << indent << "front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_right);
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "left_signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_signal);
    s << indent << "front_left_signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.front_left_signal);
    s << indent << "front_right_signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.front_right_signal);
    s << indent << "right_signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_signal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500DRIVER_MEIJI_MESSAGE_CLIFF_H

