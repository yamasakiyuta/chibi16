/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/roomba_robot_meiji/roomba_500driver_meiji/msg/Button.msg */
#ifndef ROOMBA_500DRIVER_MEIJI_MESSAGE_BUTTON_H
#define ROOMBA_500DRIVER_MEIJI_MESSAGE_BUTTON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roomba_500driver_meiji
{
template <class ContainerAllocator>
struct Button_ {
  typedef Button_<ContainerAllocator> Type;

  Button_()
  : power(false)
  , spot(false)
  , clean(false)
  , max(false)
  {
  }

  Button_(const ContainerAllocator& _alloc)
  : power(false)
  , spot(false)
  , clean(false)
  , max(false)
  {
  }

  typedef uint8_t _power_type;
  uint8_t power;

  typedef uint8_t _spot_type;
  uint8_t spot;

  typedef uint8_t _clean_type;
  uint8_t clean;

  typedef uint8_t _max_type;
  uint8_t max;


  typedef boost::shared_ptr< ::roomba_500driver_meiji::Button_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500driver_meiji::Button_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Button
typedef  ::roomba_500driver_meiji::Button_<std::allocator<void> > Button;

typedef boost::shared_ptr< ::roomba_500driver_meiji::Button> ButtonPtr;
typedef boost::shared_ptr< ::roomba_500driver_meiji::Button const> ButtonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500driver_meiji::Button_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500driver_meiji::Button_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500driver_meiji

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500driver_meiji::Button_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500driver_meiji::Button_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500driver_meiji::Button_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff815ccaa9b241e7668025b53a41fa18";
  }

  static const char* value(const  ::roomba_500driver_meiji::Button_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xff815ccaa9b241e7ULL;
  static const uint64_t static_value2 = 0x668025b53a41fa18ULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500driver_meiji::Button_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500driver_meiji/Button";
  }

  static const char* value(const  ::roomba_500driver_meiji::Button_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500driver_meiji::Button_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool power\n\
bool spot\n\
bool clean\n\
bool max\n\
\n\
";
  }

  static const char* value(const  ::roomba_500driver_meiji::Button_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::roomba_500driver_meiji::Button_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500driver_meiji::Button_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.power);
    stream.next(m.spot);
    stream.next(m.clean);
    stream.next(m.max);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Button_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500driver_meiji::Button_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500driver_meiji::Button_<ContainerAllocator> & v) 
  {
    s << indent << "power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power);
    s << indent << "spot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spot);
    s << indent << "clean: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clean);
    s << indent << "max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.max);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500DRIVER_MEIJI_MESSAGE_BUTTON_H

